/*
Copyright (c) 2020 The Gamepad Navigator Authors
See the AUTHORS.md file at the top-level directory of this distribution and at
https://github.com/fluid-lab/gamepad-navigator/raw/master/AUTHORS.md.

Licensed under the BSD 3-Clause License. You may not use this file except in
compliance with this License.

You may obtain a copy of the BSD 3-Clause License at
https://github.com/fluid-lab/gamepad-navigator/blob/master/LICENSE
*/

/* eslint-env browser */

(function (fluid) {
    "use strict";

    var gamepad = fluid.registerNamespace("gamepad");
    fluid.registerNamespace("gamepad.inputMapperUtils");

    fluid.defaults("gamepad.inputMapper", {
        gradeNames: ["gamepad.navigator"],
        model: {
            actionMap: {
                buttons: {
                    "0": "vacant",
                    "1": "vacant",
                    "2": "vacant",
                    "3": "vacant",
                    "4": "vacant",
                    "5": "vacant",
                    "6": "vacant",
                    "7": "vacant",
                    "8": "vacant",
                    "9": "vacant",
                    "10": "vacant",
                    "11": "vacant",
                    "12": "scrollUp",
                    "13": "scrollDown",
                    "14": "scrollLeft",
                    "15": "scrollRight",
                    "16": "vacant"
                },
                axes: {
                    "0": "scrollHorizontally",
                    "1": "scrollVertically",
                    "2": "vacant",
                    "3": "vacant"
                }
            }
        },
        modelListeners: {
            "axes.*": {
                funcName: "{that}.produceNavigation",
                args: "{change}"
            },
            "buttons.*": {
                funcName: "{that}.produceNavigation",
                args: "{change}"
            }
        },
        intervalRecord: {
            upwardScroll: null,
            downwardScroll: null,
            leftScroll: null,
            rightScroll: null
        },
        invokers: {
            produceNavigation: {
                funcName: "gamepad.inputMapper.produceNavigation",
                args: ["{that}", "{arguments}.0"]
            },
            scrollHorizontally: {
                funcName: "gamepad.inputMapperUtils.scrollHorizontally",
                args: ["{that}", "{arguments}.0"]
            },
            scrollLeft: {
                funcName: "gamepad.inputMapperUtils.scrollLeft",
                args: ["{that}", "{arguments}.0"]
            },
            scrollRight: {
                funcName: "gamepad.inputMapperUtils.scrollRight",
                args: ["{that}", "{arguments}.0"]
            },
            scrollVertically: {
                funcName: "gamepad.inputMapperUtils.scrollVertically",
                args: ["{that}", "{arguments}.0"]
            },
            scrollUp: {
                funcName: "gamepad.inputMapperUtils.scrollUp",
                args: ["{that}", "{arguments}.0"]
            },
            scrollDown: {
                funcName: "gamepad.inputMapperUtils.scrollDown",
                args: ["{that}", "{arguments}.0"]
            }
        }
    });

    /**
     *
     * Calls the invoker methods when axes/button is disturbed according to the
     * configured action map to produce a navigation effect.
     *
     * @param {Object} that - The inputMapper component.
     * @param {Object} change - The recipt for the change in input values.
     *
     */
    gamepad.inputMapper.produceNavigation = function (that, change) {
        /**
         * Check if input is generated by axis or button and which button/axes was
         * disturbed.
         */
        var inputType = change.path[0],
            index = change.path[1],
            inputValue = change.value;

        // Retrieve the label for the action to be triggered on gamepad disturbance.
        var actionLabel = that.model.actionMap[inputType][index];

        // Execute the navigation effect if the button is not set to "vacant".
        if (actionLabel !== "vacant") {
            fluid.get(that, actionLabel)(inputValue);
        }
    };

    gamepad.inputMapper();
})(fluid);
